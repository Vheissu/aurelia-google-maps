import { TaskQueue } from 'aurelia-task-queue';
import { BindingEngine } from 'aurelia-binding';
import { EventAggregator } from 'aurelia-event-aggregator';
import { Configure } from './configure';
import { GoogleMapsAPI } from './google-maps-api';
export declare class Events {
    static BOUNDSCHANGED: string;
    static CLICK: string;
    static INFOWINDOWDOMREADY: string;
    static MARKERCLICK: string;
    static MARKERMOUSEOVER: string;
    static MARKERMOUSEOUT: string;
    static POLYGONCLICK: string;
    static POLYGONCLICKEVENT: string;
    static APILOADED: string;
    static LOCATIONADDED: string;
    static OVERLAYCOMPLETE: string;
    static MAPCLICK: string;
    static INFOWINDOWSHOW: string;
    static MARKERRENDERED: string;
    static MAPOVERLAYCOMPLETE: string;
}
export interface Marker {
    icon?: string;
    label?: string;
    title?: string;
    draggable?: boolean;
    custom?: any;
    infoWindow?: {
        pixelOffset?: number;
        content: string;
        position?: number;
        maxWidth?: number;
    };
    latitude: number | string;
    longitude: number | string;
}
export declare class GoogleMaps {
    private element;
    private taskQueue;
    private config;
    private bindingEngine;
    private eventAggregator;
    private googleMapsApi;
    private _geocoder;
    private _currentInfoWindow;
    longitude: number;
    latitude: number;
    zoom: number;
    disableDefaultUi: boolean;
    markers: any;
    autoUpdateBounds: boolean;
    autoInfoWindow: boolean;
    mapType: string;
    options: {};
    mapLoaded: any;
    drawEnabled: boolean;
    drawMode: string;
    drawOverlayCompleteEvent: any;
    polygons: any;
    drawingControl: true;
    drawingControlOptions: {};
    map: any;
    _renderedMarkers: any[];
    _markersSubscription: any;
    _scriptPromise: Promise<any> | any;
    _mapPromise: Promise<any> | any;
    _mapResolve: Promise<any> | any;
    drawingManager: any;
    _renderedPolygons: any;
    _polygonsSubscription: any;
    constructor(element: Element, taskQueue: TaskQueue, config: Configure, bindingEngine: BindingEngine, eventAggregator: EventAggregator, googleMapsApi: GoogleMapsAPI);
    clearMarkers(): void;
    attached(): void;
    sendBoundsEvent(): void;
    sendApiLoadedEvent(): void;
    renderMarker(marker: Marker): Promise<void>;
    getCurrentPosition(): any;
    setOptions(options: any): void;
    createMarker(options: any): any;
    getCenter(): void;
    setCenter(latLong: any): void;
    updateCenter(): void;
    latitudeChanged(): void;
    longitudeChanged(): void;
    zoomChanged(newValue: any): void;
    markersChanged(newValue: Marker[]): void;
    markerCollectionChange(splices: any): void;
    zoomToMarkerBounds(force?: boolean): void;
    getMapTypeId(): any;
    error(): void;
    resize(): void;
    initDrawingManager(options?: any): any;
    destroyDrawingManager(): void;
    getOverlayType(type?: any): any;
    drawEnabledChanged(newval: any, oldval: any): void;
    drawModeChanged(newval?: any): void;
    encodePath(path?: any): any;
    decodePath(polyline: string): any;
    renderPolygon(polygonObject?: any): void;
    polygonsChanged(newValue: any): void;
    polygonCollectionChange(splices: any): void;
}
